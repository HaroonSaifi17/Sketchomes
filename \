import { AfterViewInit, Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

@Component({
  selector: 'app-photo-sphere',
  standalone: true,
  imports: [],
  templateUrl: './photo-sphere.component.html',
  styleUrls: ['./photo-sphere.component.css'],
})
export class PhotoSphereComponent implements AfterViewInit {
  @ViewChild('container') container?: ElementRef;
  @HostListener('window:resize', ['$event'])

  camera: THREE.PerspectiveCamera;
  scene: THREE.Scene;
  renderer: THREE.WebGLRenderer;


  constructor() {
    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
    this.scene = new THREE.Scene();
    this.renderer = new THREE.WebGLRenderer({antialias: true});
  }

  ngAfterViewInit(): void {
    this.init();
  }

  init(): void {
    this.renderer.setSize( window.innerWidth, window.innerHeight );
    this.container?.nativeElement.appendChild(this.renderer.domElement);

    this.renderer.setClearColor(0xFEFEFE, 1);

    const orbit = new OrbitControls(this.camera, this.renderer.domElement);

    this.camera.position.set(0, 0, 7);

    orbit.update();
    this.renderer.toneMappingExposure =  THREE.ACESFilmicToneMapping
    this.renderer.toneMappingExposure = 0.6;
    const loader = new THREE.TextureLoader();
    loader.load('/assets/images/render.jpg', (texture) => {
       texture.mapping = THREE.EquirectangularReflectionMapping;
       this.scene.background = texture;
    })


    this.renderer.setAnimationLoop(this.animate.bind(this));

  }
  animate(): void {
    this.renderer.render(this.scene, this.camera);
  }
  onResize(event: Event): void {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
}
